hayCoT :: [Figura] -> Bool                                    ∈ ¬ ≡ ∀ ∃ ≠ ^ < > ∧ ∨ ≥ ≤
hayCoT.[] = False                                            -(1)
hayCoT.(x:xs) = (circulo.x ∨ triangulo.x) ∨ hayCoT.xs        -(2)

∈l :: A -> [A] -> Bool
n ∈l [] = False                                              -(3)
n ∈l.(x:xs) = (n = x) ∨ (n ∈l xs)                            -(4)

Demostrar: hayCoT.xs = <∃y : y ∈l xs : circulo.y ∨ triangulo.y> -(HI)

Caso Base: 
  __hayCoT.xs = <∃y : y ∈l xs : circulo.y ∨ triangulo.y>
={(1)}
  False = <∃y : __y ∈l xs__ : triangulo.y ∧ rojo.y>
={(3)}
  False = __<∃y : False : triangulo.y ∧ rojo.y>__
={Por rango vacio del ∃}
  False = False
={Reflex del =}
  True

Caso Inductivo: 
  __hayCoT.xs__ = <∃y : y ∈l xs : circulo.y ∨ triangulo.y>
={(2)}
  (circulo.y ∨ triangulo.y) ∨ hayCoT.xs = <∃y : __y ∈l (x:xs)__ : circulo.y ∨ triangulo.y>
={(4)}
  (circulo.y ∨ triangulo.y) ∨ hayCoT.xs = __<∃y : (y = x) ∨ (y ∈l xs) : circulo.y ∨ triangulo.y>__
={Particion del rango del ∃}
  (circulo.y ∨ triangulo.y) ∨ hayCoT.xs = <∃y : (y = x) : circulo.y ∨ triangulo.y> ∨ __<∃y : (y ∈l xs) : circulo.y ∨ triangulo.y>__
={(HI)}
  (circulo.y ∨ triangulo.y) ∨ hayCoT.xs = __<∃y : (y = x) : circulo.y ∨ triangulo.y>__ ∨ hayCoT.xs
={Rango unitario del ∃}
  (circulo.y ∨ triangulo.y) ∨ hayCoT.xs = (circulo.y ∨ triangulo.y) ∨ hayCoT.xs
={Reflex del =}
  True
