soloPares :: [Num] -> [Num]
soloPares [] = []                       -(1)
soloPares (x:xs) 
  | x mod 2 == 0 = x : soloPares xs     -(2)
  | x mod 2 /= 0 = soloPares xs         -(3)
  
++ :: [a] -> [a] -> [a]			
[ ] ++ ys  =  ys 			                  -(4)
(x:xs) ++ ys  =  x: (xs ++ ys)	        -(5)

Definimos la funcion concatenar:= (++)


Demostrar: soloPares (xs ++ ys) = soloPares xs ++ soloPares ys   -(HI)

Caso Base: 
  soloPares (__[] ++ []__) = __soloPares []__ ++ __soloPares []__
={Por def del (++) a la izq, y por (1) dos veces a la der}
  __soloPares []__ = __[] ++ []__
={Por (1) a la izq, y por def de (++) a la der}
  [] = []
={Por reflex del =}
  True

Caso Inductivo para el primer caso de soloPares, cuando (x mod 2 == 0): 
  soloPares (__(x:xs) ++ ys__) = __soloPares (x:xs)__ ++ soloPares ys
={Por (5) a la izq, y (2) a la der}
  __soloPares (x : (xs ++ ys))__ = x : __soloPares xs ++ soloPares ys__
={Por (2) donde x:=x y xs:=(xs ++ ys), por (HI) a la der}
  x: soloPares (xs ++ ys) = x: soloPares (xs ++ ys)
={Por reflex del =}
  True
  
Caso Inductivo para el segundo caso de soloPares, cuando (x mod 2 /= 0): 
  soloPares (__(x:xs) ++ ys__) = __soloPares (x:xs)__ ++ soloPares ys
={Por (5) a la izq, y (3) a la der}
  soloPares (x: (xs ++ ys)) = __soloPares xs ++ soloPares ys__
={Por (3) donde x:=x y xs:=(xs ++ ys), por (HI) a la der}
  soloPares (xs ++ ys) = soloPares (xs ++ ys)  
={Por reflex del =}
  True
